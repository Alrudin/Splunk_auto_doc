[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "splunk-auto-doc"
dynamic = ["version"]
description = "Splunk configuration parser and documentation generator"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Splunk Auto Doc Team" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.0",
    "sqlmodel>=0.0.14",
    "psycopg2-binary>=2.9.0",
    "boto3>=1.34.0",
    "python-multipart>=0.0.6",
    "alembic>=1.13.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.14.1",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "pre-commit>=3.5.0",
    "boto3-stubs",
    "botocore-stubs",
]

[project.urls]
Homepage = "https://github.com/Alrudin/Splunk_auto_doc"
Repository = "https://github.com/Alrudin/Splunk_auto_doc"

[tool.hatch.version]
path = "backend/app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["backend/app"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
    "ARG001", # unused function argument
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true
exclude = [
    "backend/examples/.*",
    "backend/scripts/.*",
    "backend/alembic/.*",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "tests.test_schemas"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.test_upload_streaming"
ignore_errors = true

[[tool.mypy.overrides]]
module = "examples.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "scripts.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "alembic.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "mock_server"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
markers = [
    "database: marks tests as requiring database (deselect with '-m \"not database\"')",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]
testpaths = ["backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["backend/app"]
omit = [
    "backend/tests/*",
    "backend/app/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol.*:",
    "@(abc\\.)?abstractmethod",
]
